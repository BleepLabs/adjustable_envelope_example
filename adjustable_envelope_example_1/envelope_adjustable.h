#include "Arduino.h"
#include "AudioStream.h"
#include "utility/dspinst.h"

#define SAMPLES_PER_MSEC (AUDIO_SAMPLE_RATE_EXACT/1000.0)

class AudioEffectEnvelopeAdjustable : public AudioStream
{
  public:
    AudioEffectEnvelopeAdjustable() : AudioStream(1, inputQueueArray) {
      state = 0;
      delay(0);  // default values...
      attack(5.0f);
      hold(0);
      decay(50.0f);
      sustain(0.5f);
      release(500.0f);
      releaseNoteOn(5.0f);
      shape(-0.8f);
    }
    void noteOn();
    void trigger();
    void noteOff();
    void delay(float milliseconds) {
      delay_count = milliseconds2count(milliseconds);
    }
    void attack(float milliseconds) {
      if (milliseconds < min_millis) {
        milliseconds = min_millis;
      }
      attack_count = milliseconds2count(milliseconds);
      if (attack_count == 0) attack_count = 1;
    }
    void hold(float milliseconds) {
      if (milliseconds < .1) {
        milliseconds = .1; //otherwise there are issues w it not doing decay
      }
      hold_count = milliseconds2count(milliseconds);
    }
    void decay(float milliseconds) {
      if (milliseconds < min_millis) {
        milliseconds = min_millis;
      }
      decay_count = milliseconds2count(milliseconds);
      if (decay_count == 0) decay_count = 1;
    }

    void sustain(float level) {
      if (level < 0.0) level = 0;
      else if (level > 1.0) level = 1.0;
      recalc_level = level;
      sus_level = level;

      //keep the sustain level constant and with a linear response across all the expo and log shapes
      //cant use fscale as this needs to output a float
      float curve = decay_shape;
      curve = powf(10, curve * -1.0);
      sustain_mult = level * 1073741824.0;

    }

    void release(float milliseconds) {
      release_count = milliseconds2count(milliseconds);
      if (release_count == 0) release_count = 1;
    }
    void releaseNoteOn(float milliseconds) {
      release_forced_count = milliseconds2count(milliseconds);
      if (release_count == 0) release_count = 1;
    }

    void shape(float s1) {
      attackShape(s1);
      decayShape(s1);
      releaseShape(s1);
    }

    void attackShape(float s1) {
      if (s1 < -1.0) {
        s1 = -1.0;
      }
      if (s1 > 1.0) {
        s1 = 1.0;
      }
      if (s1 > 0) {
        s1 *= log_max;
      }
      attack_shape = s1;
    }
    void decayShape(float s1) {
      if (s1 < -1.0) {
        s1 = -1.0;
      }
      if (s1 > 1.0) {
        s1 = 1.0;
      }
      if (s1 > 0) {
        s1 *= log_max;
      }
      decay_shape = s1;
    }
    void releaseShape(float s1) {
      if (s1 < -1.0) {
        s1 = -1.0;
      }
      if (s1 > 1.0) {
        s1 = 1.0;
      }
      if (s1 > 0) {
        s1 *= log_max;
      }
      release_shape = s1;
    }

    bool isActive();
    bool isSustain();
    using AudioStream::release;
    virtual void update(void);




  private:
    uint16_t milliseconds2count(float milliseconds) {
      if (milliseconds < min_millis) milliseconds = min_millis;
      uint32_t c = ((uint32_t)(milliseconds * SAMPLES_PER_MSEC) + 7) >> 3;
      if (c > 65535) c = 65535; // allow up to 11.88 seconds
      return c;
    }

    //powf is fast http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
    int32_t fscale(float inputValue, float curve) {
      curve = curve * -1.0; //log positive, expo negateive idk thats jsut how it is
      curve = powf(10, curve); // convert linear scale into logarithmic exponent for other pow function
      float normalizedCurVal  =  inputValue / 65600.0;   // normalize to 0 - 1 float. well jsuta little under 1.0
      int32_t rangedValue =  (powf(normalizedCurVal, curve) * 65600.0);
      return (rangedValue);
    }

    int32_t lerpLUT (uint16_t mult_in, float shape_in) {
      float mult_float = mult_in / 255.0;
      int mult_int = mult_float;
      float mult_decimal_rem = mult_float - mult_int;

      int bank_a_sel;
      int bank_b_sel;
      float mult_lerp;
      byte offs = 4;
      float shape_float;
      int shape_int;

      if (shape_in < 0) {
        shape_float = abs(shape_in) * 4.0;
        shape_int = shape_float;
        bank_a_sel = shape_int + offs;
        bank_b_sel = bank_a_sel + 1;
      }
      if (shape_in > 0) {

        shape_float = ((shape_in) * (4.0 / log_max));
        shape_int = shape_float;
        bank_a_sel = offs - shape_int;
        bank_b_sel = bank_a_sel - 1;
      }
      float shape_decimal_rem = abs(shape_float) - shape_int;

      if (bank_a_sel > 7) {
        bank_a_sel = 7;
      }
      if (bank_b_sel > 7) {
        bank_b_sel = 7;
      }
      if (bank_a_sel < 0) {
        bank_a_sel = 0;
      }
      if (bank_b_sel < 0) {
        bank_b_sel = 0;
      }

      if (mult_int < 255) {

        int mult_pos_a_1 = lut[bank_a_sel][mult_int];
        int mult_pos_a_2 = lut[bank_a_sel][mult_int + 1];
        int mult_lerp_a = (mult_pos_a_1 * (1.0 - mult_decimal_rem)) + (mult_pos_a_2 * (mult_decimal_rem));

        int mult_pos_b_1 = lut[bank_b_sel][mult_int];
        int mult_pos_b_2 = lut[bank_b_sel][mult_int + 1];
        int mult_lerp_b = (mult_pos_b_1 * (1.0 - mult_decimal_rem)) + (mult_pos_b_2 * (mult_decimal_rem));

        int bank_lerp = (mult_lerp_a * (1.0 - shape_decimal_rem)) + (mult_lerp_b * (shape_decimal_rem));
        mult_lerp = bank_lerp;
      }

      if (mult_int >= 255) {
        mult_lerp = 65535;
      }
      if (mult_int < 1) {
        mult_lerp = 0;
      }
      return mult_lerp;
    }

    audio_block_t *inputQueueArray[1];
    // state
    uint8_t  state, first_rel;     // idle, delay, attack, hold, decay, sustain, release, forced
    uint16_t count;      // how much time remains in this state, in 8 sample units
    int32_t  mult_hires; // attenuation, 0=off, 0x40000000=unity gain
    int32_t  inc_hires;  // amount to change mult_hires every 8 samples

    // settings
    float attack_shape, decay_shape, release_shape, shape_sel, prev_shape_sel;
    uint16_t delay_count;
    uint16_t attack_count;
    uint16_t hold_count;
    uint16_t decay_count;
    int32_t  sustain_mult, retrig_mult;
    uint16_t release_count;
    uint16_t release_forced_count;
    uint16_t print_tick;
    float recalc_level, sus_level, atten_level;
    float min_millis = .9;
    float log_max = 1.0; //log isn't super useful after .5 i think
    byte triggerMode;
    byte first_calc;
    int32_t curve, start_curve, end_curve, lerp_curve, lerp_curve2;
    int32_t lerpsteps[8];
    int32_t step_size;
    int32_t mult, inc;
    byte calc_mode = 1; //0 is fscale , 1 LUT

    const uint16_t lut[9][256] = {
      {37640, 40342, 42011, 43237, 44213, 45026, 45726, 46340, 46889, 47386, 47840, 48258, 48646, 49007, 49347, 49666, 49968, 50255, 50527, 50787, 51035, 51273, 51502, 51721, 51933, 52137, 52334, 52525, 52710, 52889, 53062, 53231, 53395, 53555, 53710, 53862, 54009, 54154, 54294, 54432, 54567, 54698, 54827, 54953, 55077, 55198, 55317, 55434, 55548, 55660, 55771, 55879, 55986, 56090, 56193, 56295, 56395, 56493, 56589, 56685, 56778, 56871, 56962, 57052, 57140, 57227, 57313, 57398, 57482, 57565, 57647, 57727, 57807, 57886, 57964, 58040, 58116, 58191, 58266, 58339, 58411, 58483, 58554, 58624, 58694, 58762, 58830, 58898, 58964, 59030, 59095, 59160, 59224, 59287, 59350, 59412, 59474, 59535, 59595, 59655, 59715, 59774, 59832, 59890, 59947, 60004, 60060, 60116, 60172, 60227, 60281, 60335, 60389, 60442, 60495, 60547, 60599, 60651, 60702, 60753, 60803, 60853, 60903, 60952, 61001, 61050, 61098, 61146, 61194, 61241, 61288, 61335, 61381, 61427, 61473, 61518, 61563, 61608, 61653, 61697, 61741, 61784, 61828, 61871, 61914, 61956, 61998, 62041, 62082, 62124, 62165, 62206, 62247, 62288, 62328, 62368, 62408, 62447, 62487, 62526, 62565, 62604, 62642, 62681, 62719, 62757, 62794, 62832, 62869, 62906, 62943, 62980, 63016, 63053, 63089, 63125, 63161, 63196, 63232, 63267, 63302, 63337, 63372, 63406, 63440, 63475, 63509, 63543, 63576, 63610, 63643, 63677, 63710, 63743, 63775, 63808, 63840, 63873, 63905, 63937, 63969, 64001, 64032, 64064, 64095, 64126, 64157, 64188, 64219, 64250, 64280, 64311, 64341, 64371, 64401, 64431, 64461, 64490, 64520, 64549, 64579, 64608, 64637, 64666, 64695, 64723, 64752, 64780, 64809, 64837, 64865, 64893, 64921, 64949, 64976, 65004, 65032, 65059, 65086, 65113, 65140, 65167, 65194, 65221, 65248, 65274, 65301, 65327, 65354, 65380, 65406, 65432, 65458, 65484, 65509, 65535},
      {24447, 27654, 29721, 31281, 32547, 33620, 34554, 35385, 36134, 36817, 37446, 38030, 38575, 39087, 39570, 40026, 40460, 40874, 41269, 41647, 42010, 42359, 42695, 43019, 43332, 43636, 43930, 44215, 44491, 44760, 45022, 45277, 45526, 45768, 46004, 46235, 46461, 46682, 46898, 47110, 47317, 47520, 47720, 47915, 48107, 48295, 48480, 48662, 48841, 49017, 49190, 49360, 49527, 49692, 49855, 50015, 50172, 50328, 50481, 50632, 50781, 50928, 51073, 51217, 51358, 51498, 51635, 51772, 51906, 52039, 52171, 52301, 52429, 52556, 52682, 52806, 52929, 53050, 53171, 53290, 53408, 53524, 53640, 53754, 53867, 53979, 54091, 54201, 54310, 54418, 54525, 54631, 54736, 54840, 54943, 55046, 55147, 55248, 55348, 55447, 55545, 55642, 55739, 55835, 55930, 56024, 56118, 56211, 56303, 56395, 56485, 56576, 56665, 56754, 56842, 56930, 57017, 57103, 57189, 57274, 57359, 57443, 57526, 57609, 57691, 57773, 57854, 57935, 58015, 58095, 58174, 58253, 58331, 58409, 58486, 58563, 58639, 58715, 58791, 58866, 58940, 59014, 59088, 59161, 59234, 59307, 59379, 59450, 59522, 59592, 59663, 59733, 59803, 59872, 59941, 60009, 60078, 60146, 60213, 60280, 60347, 60414, 60480, 60546, 60611, 60676, 60741, 60806, 60870, 60934, 60997, 61061, 61123, 61186, 61249, 61311, 61372, 61434, 61495, 61556, 61617, 61677, 61737, 61797, 61857, 61916, 61975, 62034, 62093, 62151, 62209, 62267, 62324, 62382, 62439, 62495, 62552, 62608, 62664, 62720, 62776, 62831, 62887, 62942, 62996, 63051, 63105, 63159, 63213, 63267, 63320, 63374, 63427, 63480, 63532, 63585, 63637, 63689, 63741, 63792, 63844, 63895, 63946, 63997, 64048, 64098, 64149, 64199, 64249, 64299, 64348, 64398, 64447, 64496, 64545, 64594, 64642, 64691, 64739, 64787, 64835, 64883, 64930, 64978, 65025, 65072, 65119, 65166, 65213, 65259, 65306, 65352, 65398, 65444, 65489, 65535},
      {11348, 14129, 16062, 17592, 18878, 19998, 20997, 21903, 22734, 23504, 24224, 24899, 25538, 26143, 26720, 27271, 27799, 28306, 28794, 29265, 29720, 30160, 30587, 31001, 31404, 31796, 32178, 32550, 32913, 33268, 33615, 33954, 34286, 34611, 34930, 35243, 35549, 35850, 36146, 36437, 36722, 37003, 37279, 37551, 37819, 38083, 38343, 38599, 38852, 39101, 39346, 39588, 39828, 40064, 40297, 40527, 40755, 40979, 41202, 41421, 41638, 41853, 42065, 42275, 42483, 42689, 42892, 43093, 43293, 43490, 43686, 43879, 44071, 44261, 44450, 44636, 44821, 45004, 45186, 45366, 45545, 45722, 45897, 46071, 46244, 46416, 46586, 46754, 46922, 47088, 47252, 47416, 47578, 47740, 47900, 48058, 48216, 48373, 48528, 48683, 48836, 48989, 49140, 49290, 49440, 49588, 49736, 49882, 50028, 50173, 50316, 50459, 50601, 50742, 50883, 51022, 51161, 51299, 51436, 51572, 51708, 51842, 51976, 52110, 52242, 52374, 52505, 52636, 52765, 52894, 53023, 53150, 53277, 53404, 53529, 53654, 53779, 53903, 54026, 54148, 54270, 54392, 54513, 54633, 54753, 54872, 54990, 55108, 55226, 55343, 55459, 55575, 55690, 55805, 55920, 56034, 56147, 56260, 56372, 56484, 56595, 56706, 56817, 56927, 57036, 57145, 57254, 57362, 57470, 57577, 57684, 57791, 57897, 58002, 58107, 58212, 58317, 58421, 58524, 58627, 58730, 58833, 58935, 59036, 59138, 59238, 59339, 59439, 59539, 59638, 59738, 59836, 59935, 60033, 60130, 60228, 60325, 60421, 60518, 60614, 60709, 60805, 60900, 60994, 61089, 61183, 61277, 61370, 61463, 61556, 61649, 61741, 61833, 61924, 62016, 62107, 62198, 62288, 62378, 62468, 62558, 62647, 62736, 62825, 62914, 63002, 63090, 63178, 63265, 63353, 63440, 63526, 63613, 63699, 63785, 63871, 63956, 64041, 64126, 64211, 64296, 64380, 64464, 64548, 64631, 64714, 64797, 64880, 64963, 65045, 65128, 65209, 65291, 65373, 65454, 65535},
      {2899, 4281, 5377, 6321, 7166, 7940, 8659, 9334, 9973, 10582, 11164, 11724, 12264, 12786, 13292, 13783, 14261, 14727, 15182, 15626, 16060, 16486, 16903, 17313, 17715, 18110, 18498, 18881, 19257, 19628, 19993, 20353, 20708, 21059, 21405, 21747, 22084, 22418, 22748, 23074, 23397, 23716, 24032, 24345, 24654, 24961, 25264, 25565, 25864, 26159, 26452, 26742, 27030, 27316, 27599, 27880, 28159, 28436, 28711, 28983, 29254, 29523, 29790, 30055, 30318, 30579, 30839, 31097, 31353, 31608, 31861, 32113, 32363, 32611, 32858, 33104, 33348, 33591, 33833, 34073, 34312, 34549, 34785, 35020, 35254, 35487, 35718, 35949, 36178, 36406, 36633, 36859, 37083, 37307, 37530, 37751, 37972, 38192, 38410, 38628, 38845, 39061, 39276, 39490, 39703, 39915, 40126, 40337, 40546, 40755, 40963, 41170, 41376, 41582, 41787, 41990, 42194, 42396, 42598, 42799, 42999, 43198, 43397, 43595, 43792, 43989, 44185, 44380, 44575, 44769, 44962, 45155, 45347, 45539, 45729, 45920, 46109, 46298, 46486, 46674, 46861, 47048, 47234, 47419, 47604, 47789, 47973, 48156, 48338, 48521, 48702, 48883, 49064, 49244, 49424, 49603, 49781, 49959, 50137, 50314, 50491, 50667, 50842, 51017, 51192, 51366, 51540, 51713, 51886, 52059, 52231, 52402, 52573, 52744, 52914, 53084, 53254, 53423, 53591, 53759, 53927, 54094, 54261, 54428, 54594, 54760, 54925, 55090, 55255, 55419, 55583, 55746, 55909, 56072, 56234, 56396, 56558, 56719, 56880, 57041, 57201, 57361, 57520, 57679, 57838, 57997, 58155, 58313, 58470, 58627, 58784, 58941, 59097, 59253, 59408, 59564, 59718, 59873, 60027, 60181, 60335, 60488, 60641, 60794, 60947, 61099, 61251, 61402, 61554, 61705, 61855, 62006, 62156, 62306, 62455, 62605, 62754, 62902, 63051, 63199, 63347, 63495, 63642, 63789, 63936, 64083, 64229, 64375, 64521, 64667, 64812, 64957, 65102, 65247, 65391, 65535}, //-.25
      {256, 512, 768, 1024, 1280, 1536, 1792, 2048, 2304, 2560, 2816, 3072, 3328, 3584, 3840, 4096, 4352, 4608, 4864, 5120, 5376, 5632, 5888, 6144, 6400, 6656, 6912, 7168, 7424, 7680, 7936, 8192, 8448, 8704, 8960, 9216, 9472, 9728, 9984, 10240, 10496, 10752, 11008, 11264, 11520, 11776, 12032, 12288, 12544, 12800, 13056, 13312, 13568, 13824, 14080, 14336, 14592, 14848, 15104, 15360, 15616, 15872, 16128, 16384, 16640, 16896, 17152, 17408, 17664, 17920, 18176, 18432, 18688, 18944, 19200, 19456, 19712, 19968, 20224, 20480, 20736, 20992, 21248, 21504, 21760, 22016, 22272, 22528, 22784, 23040, 23296, 23552, 23808, 24064, 24320, 24576, 24832, 25088, 25344, 25600, 25856, 26112, 26368, 26624, 26880, 27136, 27392, 27648, 27904, 28160, 28416, 28672, 28928, 29184, 29440, 29696, 29952, 30208, 30464, 30720, 30976, 31232, 31488, 31744, 32000, 32256, 32512, 32768, 33023, 33279, 33535, 33791, 34047, 34303, 34559, 34815, 35071, 35327, 35583, 35839, 36095, 36351, 36607, 36863, 37119, 37375, 37631, 37887, 38143, 38399, 38655, 38911, 39167, 39423, 39679, 39935, 40191, 40447, 40703, 40959, 41215, 41471, 41727, 41983, 42239, 42495, 42751, 43007, 43263, 43519, 43775, 44031, 44287, 44543, 44799, 45055, 45311, 45567, 45823, 46079, 46335, 46591, 46847, 47103, 47359, 47615, 47871, 48127, 48383, 48639, 48895, 49151, 49407, 49663, 49919, 50175, 50431, 50687, 50943, 51199, 51455, 51711, 51967, 52223, 52479, 52735, 52991, 53247, 53503, 53759, 54015, 54271, 54527, 54783, 55039, 55295, 55551, 55807, 56063, 56319, 56575, 56831, 57087, 57343, 57599, 57855, 58111, 58367, 58623, 58879, 59135, 59391, 59647, 59903, 60159, 60415, 60671, 60927, 61183, 61439, 61695, 61951, 62207, 62463, 62719, 62975, 63231, 63487, 63743, 63999, 64255, 64511, 64767, 65023, 65279, 65535}, //0 yes its a watse but makes it v easy
      {3, 12, 24, 40, 60, 83, 109, 138, 170, 205, 243, 284, 327, 373, 422, 473, 527, 584, 643, 704, 768, 834, 903, 974, 1047, 1122, 1200, 1281, 1363, 1448, 1535, 1624, 1715, 1809, 1904, 2002, 2102, 2204, 2308, 2415, 2523, 2634, 2746, 2861, 2977, 3096, 3217, 3339, 3464, 3591, 3720, 3850, 3983, 4117, 4254, 4393, 4533, 4675, 4820, 4966, 5114, 5264, 5416, 5570, 5726, 5883, 6043, 6204, 6367, 6532, 6699, 6868, 7038, 7211, 7385, 7561, 7739, 7918, 8100, 8283, 8468, 8655, 8843, 9033, 9226, 9420, 9615, 9813, 10012, 10213, 10415, 10620, 10826, 11034, 11243, 11455, 11668, 11882, 12099, 12317, 12537, 12759, 12982, 13207, 13433, 13662, 13892, 14124, 14357, 14592, 14829, 15067, 15307, 15549, 15792, 16037, 16284, 16532, 16782, 17034, 17287, 17542, 17799, 18057, 18316, 18578, 18841, 19105, 19372, 19640, 19909, 20180, 20453, 20727, 21003, 21280, 21559, 21840, 22122, 22406, 22691, 22978, 23267, 23557, 23849, 24142, 24437, 24733, 25031, 25331, 25632, 25934, 26239, 26544, 26852, 27161, 27471, 27783, 28096, 28411, 28728, 29046, 29366, 29687, 30009, 30333, 30659, 30986, 31315, 31645, 31977, 32311, 32645, 32982, 33319, 33659, 34000, 34342, 34686, 35031, 35378, 35726, 36076, 36427, 36780, 37135, 37490, 37848, 38206, 38567, 38928, 39291, 39656, 40022, 40390, 40759, 41129, 41501, 41875, 42250, 42626, 43004, 43383, 43764, 44146, 44530, 44915, 45302, 45690, 46079, 46470, 46862, 47256, 47652, 48048, 48446, 48846, 49247, 49649, 50053, 50458, 50865, 51273, 51683, 52094, 52506, 52920, 53336, 53752, 54170, 54590, 55011, 55433, 55857, 56282, 56709, 57137, 57566, 57997, 58429, 58863, 59298, 59734, 60172, 60611, 61052, 61494, 61938, 62382, 62829, 63276, 63725, 64176, 64627, 65080, 65535}, //.25
      {0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 4, 5, 7, 8, 10, 12, 15, 18, 21, 24, 28, 32, 37, 42, 47, 53, 60, 67, 74, 83, 91, 101, 111, 121, 133, 145, 157, 171, 185, 200, 216, 233, 250, 268, 288, 308, 329, 351, 375, 399, 424, 450, 478, 506, 536, 567, 599, 632, 667, 703, 740, 778, 818, 859, 901, 945, 990, 1037, 1086, 1135, 1187, 1240, 1294, 1350, 1408, 1467, 1529, 1591, 1656, 1722, 1790, 1860, 1932, 2006, 2081, 2159, 2238, 2320, 2403, 2489, 2576, 2666, 2758, 2851, 2947, 3046, 3146, 3249, 3354, 3461, 3570, 3682, 3796, 3913, 4032, 4154, 4278, 4404, 4533, 4665, 4799, 4936, 5075, 5217, 5362, 5510, 5660, 5813, 5969, 6128, 6289, 6454, 6621, 6791, 6965, 7141, 7320, 7503, 7688, 7877, 8069, 8263, 8461, 8663, 8867, 9075, 9286, 9501, 9719, 9940, 10164, 10393, 10624, 10859, 11098, 11340, 11586, 11835, 12088, 12345, 12605, 12869, 13137, 13409, 13684, 13963, 14247, 14534, 14825, 15120, 15419, 15722, 16029, 16340, 16655, 16974, 17298, 17626, 17958, 18294, 18634, 18979, 19328, 19682, 20039, 20402, 20768, 21140, 21515, 21896, 22280, 22670, 23064, 23463, 23866, 24274, 24687, 25105, 25527, 25954, 26387, 26824, 27266, 27712, 28164, 28621, 29083, 29550, 30022, 30500, 30982, 31470, 31963, 32461, 32964, 33473, 33987, 34506, 35031, 35561, 36097, 36638, 37185, 37737, 38295, 38858, 39427, 40002, 40583, 41169, 41761, 42359, 42962, 43572, 44187, 44808, 45435, 46069, 46708, 47353, 48004, 48662, 49325, 49995, 50671, 51353, 52041, 52736, 53437, 54144, 54857, 55578, 56304, 57037, 57776, 58522, 59275, 60034, 60800, 61572, 62351, 63137, 63930, 64729, 65535}, //.5
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 6, 7, 8, 8, 9, 10, 12, 13, 14, 16, 17, 19, 21, 23, 25, 27, 29, 32, 35, 38, 41, 45, 48, 52, 57, 61, 66, 71, 76, 82, 88, 95, 101, 109, 116, 124, 133, 142, 152, 162, 172, 183, 195, 208, 221, 234, 249, 264, 280, 296, 313, 332, 351, 371, 392, 414, 436, 460, 485, 511, 539, 567, 597, 627, 660, 693, 728, 764, 802, 841, 882, 925, 969, 1015, 1063, 1112, 1163, 1217, 1272, 1329, 1389, 1451, 1514, 1581, 1649, 1720, 1793, 1869, 1948, 2029, 2114, 2200, 2290, 2383, 2479, 2578, 2680, 2786, 2895, 3008, 3124, 3243, 3367, 3494, 3625, 3761, 3900, 4044, 4192, 4344, 4501, 4663, 4829, 5000, 5176, 5357, 5543, 5735, 5932, 6134, 6343, 6557, 6776, 7002, 7234, 7473, 7717, 7969, 8227, 8492, 8763, 9042, 9328, 9622, 9923, 10232, 10548, 10873, 11206, 11547, 11897, 12255, 12622, 12998, 13384, 13778, 14183, 14596, 15020, 15454, 15898, 16353, 16818, 17294, 17781, 18279, 18788, 19310, 19843, 20388, 20945, 21515, 22098, 22693, 23302, 23923, 24559, 25208, 25872, 26549, 27241, 27948, 28670, 29407, 30160, 30929, 31713, 32514, 33331, 34165, 35017, 35885, 36772, 37676, 38598, 39539, 40499, 41477, 42475, 43493, 44531, 45589, 46667, 47767, 48887, 50029, 51193, 52379, 53588, 54820, 56074, 57353, 58655, 59981, 61332, 62707, 64108, 65535}, //.75
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 6, 7, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 22, 24, 26, 28, 31, 34, 36, 40, 43, 47, 50, 55, 59, 64, 69, 75, 81, 87, 94, 101, 109, 117, 126, 136, 146, 157, 168, 181, 194, 208, 223, 239, 255, 273, 292, 313, 334, 357, 381, 407, 434, 463, 493, 526, 560, 596, 634, 675, 718, 763, 811, 861, 915, 971, 1030, 1093, 1159, 1228, 1302, 1379, 1460, 1546, 1636, 1731, 1831, 1936, 2046, 2162, 2283, 2411, 2546, 2687, 2835, 2990, 3153, 3324, 3503, 3691, 3887, 4093, 4309, 4536, 4772, 5020, 5280, 5551, 5835, 6132, 6442, 6767, 7106, 7460, 7830, 8217, 8621, 9042, 9482, 9941, 10420, 10920, 11441, 11984, 12551, 13141, 13757, 14398, 15066, 15762, 16486, 17241, 18026, 18843, 19694, 20579, 21500, 22457, 23453, 24488, 25564, 26683, 27845, 29053, 30308, 31611, 32965, 34371, 35830, 37345, 38917, 40548, 42241, 43997, 45819, 47708, 49667, 51698, 53804, 55986, 58248, 60591, 63020, 65535}, //1.0
    };

};
